#include <bits/stdc++.h>
using namespace std;

int getMinVertex(bool* visited, int* weight, int n){
    int minVertex = -1;
    for(int i = 0; i<n; i++){
        if(!visited[i] &&( (minVertex == -1) || weight[minVertex] > weight[i])){
            minVertex = i;
        }
    }
    return minVertex;
}
void dijkstra(int** edges, int n){
    bool* visited = new bool[n]();
    int* dist = new int[n];
    for(int i = 0; i<n; i++){
        dist[i] = INT_MAX;
    }
    //parent[0] = -1;
    dist[0] = 0;
    for(int i = 0; i<n-1; i++){
        int minVertex = getMinVertex(visited, dist, n);
        visited[minVertex] = true;
        for(int j = 0; j<n; j++){
            if(edges[minVertex][j] && !visited[j]){
                int currD = dist[minVertex] + edges[minVertex][j];
                if(dist[j] > currD){
                    dist[j] = currD;
                    //parent[j] = minVertex;
                }
            }
        }
    }
    for(int i = 0; i<n; i++){
            cout<<i<<" "<<dist[i]<<endl;
    }
}

int main()
{
  int n, E;
  cin >> n >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to Print the output yourself
	 
  */
  int** edges = new int*[n];
    for(int i = 0; i<n; i++){
        edges[i] =new int[n];
        for(int j = 0; j<n; j++){
            edges[i][j] = 0;
        }
    }
    for(int i = 0; i<E; i++){
        int f, s, weight;
        cin>>f>>s>>weight;
        edges[f][s] = weight;
        edges[s][f] = weight;
    }
    cout<<endl;
    dijkstra(edges, n);
    
  return 0;
}
